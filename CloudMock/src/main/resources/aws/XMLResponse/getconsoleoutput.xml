<?xml version="1.0" encoding="UTF-8"?>
<GetConsoleOutputResponse xmlns="http://ec2.amazonaws.com/doc/2013-10-15/">
	<requestId>68b21eea-44aa-4498-b62b-f741f0875e1d</requestId>
	<instanceId>i-d734803c</instanceId>
	<timestamp>2014-09-12T10:48:09.000Z</timestamp>
	<output>Xen Minimal OS!
  start_info: 0xd00000(VA)
    nr_pages: 0x6a400
  shared_inf: 0x7d88d000(MA)
     pt_base: 0xd03000(VA)
nr_pt_frames: 0xb
    mfn_list: 0x9ae000(VA)
   mod_start: 0x0(VA)
     mod_len: 0
       flags: 0x0
    cmd_line: root=/dev/sda1 ro 4
  stack:      0x96d840-0x98d840
MM: Init
      _text: 0x0(VA)
     _etext: 0x7dc7d(VA)
   _erodata: 0x9a000(VA)
     _edata: 0x9fce0(VA)
stack start: 0x96d840(VA)
       _end: 0x9ade40(VA)
  start_pfn: d11
    max_pfn: 6a400
Mapping memory range 0x1000000 - 0x6a400000
setting 0x0-0x9a000 readonly
skipped 0x1000
MM: Initialise page allocator for 105c000(105c000)-6a400000(6a400000)
MM: done
Demand map pfns at 6a401000-206a401000.
Heap resides at 206a402000-406a402000.
Initialising timer interface
Initialising console ... done.
gnttab_table mapped at 0x6a401000.
Initialising scheduler
Thread "Idle": pointer: 0x206a402050, stack: 0x13d0000
Thread "xenstore": pointer: 0x206a402800, stack: 0x13e0000
xenbus initialised on irq 1 mfn 0xd502fe
Thread "shutdown": pointer: 0x206a402fb0, stack: 0x13f0000
Dummy main: start_info=0x98d940
Thread "main": pointer: 0x206a403760, stack: 0x6a000000
"main" "root=/dev/sda1" "ro" "4" 
vbd 2049 is hd0
******************* BLKFRONT for device/vbd/2049 **********


backend at /local/domain/0/backend/vbd/8827/2049
Failed to read /local/domain/0/backend/vbd/8827/2049/feature-barrier.
Failed to read /local/domain/0/backend/vbd/8827/2049/feature-flush-cache.
16777216 sectors of 512 bytes
**************************
vbd 2051 is hd1
******************* BLKFRONT for device/vbd/2051 **********


backend at /local/domain/0/backend/vbd/8827/2051
Failed to read /local/domain/0/backend/vbd/8827/2051/feature-barrier.
Failed to read /local/domain/0/backend/vbd/8827/2051/feature-flush-cache.
1835008 sectors of 512 bytes
**************************
Press `ESC' to enter the menu... 0   [H[J  Booting 'Amazon Linux 2014.03 (3.10.42-52.145.amzn1.x86_64)'

root (hd0)
 Filesystem type is ext2fs, using whole disk
kernel /boot/vmlinuz-3.10.42-52.145.amzn1.x86_64 root=LABEL=/ console=hvc0 
initrd /boot/initramfs-3.10.42-52.145.amzn1.x86_64.img

============= Init TPM Front ================
Tpmfront:Error Unable to read device/vtpm/0/backend-id during tpmfront initialization! error = ENOENT
Tpmfront:Info Shutting down tpmfront
close blk: backend=/local/domain/0/backend/vbd/8827/2049 node=device/vbd/2049
close blk: backend=/local/domain/0/backend/vbd/8827/2051 node=device/vbd/2051
[    0.000000] Initializing cgroup subsys cpuset
[    0.000000] Initializing cgroup subsys cpu
[    0.000000] Initializing cgroup subsys cpuacct
[    0.000000] Linux version 3.10.42-52.145.amzn1.x86_64 (mockbuild@gobi-build-64003) (gcc version 4.8.2 20131212 (Red Hat 4.8.2-7) (GCC) ) #1 SMP Tue Jun 10 23:46:43 UTC 2014
[    0.000000] Command line: root=LABEL=/ console=hvc0 
[    0.000000] ACPI in unprivileged domain disabled
[    0.000000] e820: BIOS-provided physical RAM map:
[    0.000000] Xen: [mem 0x0000000000000000-0x000000000009ffff] usable
[    0.000000] Xen: [mem 0x00000000000a0000-0x00000000000fffff] reserved
[    0.000000] Xen: [mem 0x0000000000100000-0x000000006abfffff] usable
[    0.000000] NX (Execute Disable) protection: active
[    0.000000] DMI not present or invalid.
[    0.000000] No AGP bridge found
[    0.000000] e820: last_pfn = 0x6ac00 max_arch_pfn = 0x400000000
[    0.000000] init_memory_mapping: [mem 0x00000000-0x000fffff]
[    0.000000] init_memory_mapping: [mem 0x6a200000-0x6a3fffff]
[    0.000000] init_memory_mapping: [mem 0x68000000-0x6a1fffff]
[    0.000000] init_memory_mapping: [mem 0x00100000-0x67ffffff]
[    0.000000] init_memory_mapping: [mem 0x6a400000-0x6abfffff]
[    0.000000] RAMDISK: [mem 0x021a4000-0x03d02fff]
[    0.000000] NUMA turned off
[    0.000000] Faking a node at [mem 0x0000000000000000-0x000000006abfffff]
[    0.000000] Initmem setup node 0 [mem 0x00000000-0x6abfffff]
[    0.000000]   NODE_DATA [mem 0x6a0aa000-0x6a0d0fff]
[    0.000000] Zone ranges:
[    0.000000]   DMA      [mem 0x00001000-0x00ffffff]
[    0.000000]   DMA32    [mem 0x01000000-0xffffffff]
[    0.000000]   Normal   empty
[    0.000000] Movable zone start for each node
[    0.000000] Early memory node ranges
[    0.000000]   node   0: [mem 0x00001000-0x0009ffff]
[    0.000000]   node   0: [mem 0x00100000-0x6abfffff]
[    0.000000] smpboot: Allowing 1 CPUs, 0 hotplug CPUs
[    0.000000] No local APIC present
[    0.000000] APIC: disable apic facility
[    0.000000] APIC: switched to apic NOOP
[    0.000000] e820: [mem 0x6ac00000-0xffffffff] available for PCI devices
[    0.000000] Booting paravirtualized kernel on Xen
[    0.000000] Xen version: 3.4.3.amazon (preserve-AD)
[    0.000000] setup_percpu: NR_CPUS:64 nr_cpumask_bits:64 nr_cpu_ids:1 nr_node_ids:1
[    0.000000] PERCPU: Embedded 28 pages/cpu @ffff880069a00000 s83648 r8192 d22848 u2097152
[17753539.136237] Built 1 zonelists in Node order, mobility grouping on.  Total pages: 430298
[17753539.136240] Policy zone: DMA32
[17753539.136242] Kernel command line: root=LABEL=/ console=hvc0 
[17753539.136735] PID hash table entries: 4096 (order: 3, 32768 bytes)
[17753539.136779] Checking aperture...
[17753539.170159] No AGP bridge found
[17753539.180209] Memory: 1662320k/1748992k available (4471k kernel code, 388k absent, 86284k reserved, 6558k data, 1084k init)
[17753539.180332] SLUB: HWalign=64, Order=0-3, MinObjects=0, CPUs=1, Nodes=1
[17753539.180371] Hierarchical RCU implementation.
[17753539.180373] 	Additional per-CPU info printed with stalls.
[17753539.180374] 	RCU restricting CPUs from NR_CPUS=64 to nr_cpu_ids=1.
[17753539.180385] NR_IRQS:4352 nr_irqs:256 16
[17753539.180531] Console: colour dummy device 80x25
[17753539.180646] console [tty0] enabled
[17753539.180811] console [hvc0] enabled
[17753539.182079] allocated 7340032 bytes of page_cgroup
[17753539.182087] please try 'cgroup_disable=memory' option if you don't want memory cgroups
[17753539.182139] installing Xen timer for CPU 0
[17753539.182182] tsc: Detected 1799.999 MHz processor
[17753539.182190] Calibrating delay loop (skipped), value calculated using timer frequency.. 3599.99 BogoMIPS (lpj=7199996)
[17753539.182200] pid_max: default: 32768 minimum: 301
[17753539.182246] Security Framework initialized
[17753539.182704] Dentry cache hash table entries: 262144 (order: 9, 2097152 bytes)
[17753539.183357] Inode-cache hash table entries: 131072 (order: 8, 1048576 bytes)
[17753539.183602] Mount-cache hash table entries: 256
[17753539.183919] Initializing cgroup subsys memory
[17753539.183942] Initializing cgroup subsys devices
[17753539.183948] Initializing cgroup subsys freezer
[17753539.183954] Initializing cgroup subsys blkio
[17753539.183959] Initializing cgroup subsys perf_event
[17753539.183965] Initializing cgroup subsys hugetlb
[17753539.184058] ENERGY_PERF_BIAS: Set to 'normal', was 'performance'
[17753539.184058] ENERGY_PERF_BIAS: View and update with x86_energy_perf_policy(8)
[17753539.184076] CPU: Physical Processor ID: 0
[17753539.184080] CPU: Processor Core ID: 0
[17753539.184089] Last level iTLB entries: 4KB 512, 2MB 0, 4MB 0
[17753539.184089] Last level dTLB entries: 4KB 512, 2MB 32, 4MB 32
[17753539.184089] tlb_flushall_shift: 5
[17753539.511099] Freeing SMP alternatives: 16k freed
[17753539.538258] ftrace: allocating 17951 entries in 71 pages
[17753539.550392] cpu 0 spinlock event irq 17
[17753539.550446] Performance Events: unsupported p6 CPU model 45 no PMU driver, software events only.
[17753539.551534] Brought up 1 CPUs
[17753539.551704] devtmpfs: initialized
[17753539.553620] Grant tables using version 1 layout.
[17753539.553643] Grant table initialized
[17753539.553697] NET: Registered protocol family 16
[17753539.555026] PCI: setting up Xen PCI frontend stub
[17753539.557978] bio: create slab <bio-0> at 0
[17753539.558176] ACPI: Interpreter disabled.
[17753539.558463] xen/balloon: Initialising balloon driver.
[17753539.586154] xen-balloon: Initialising balloon driver.
[17753539.586524] vgaarb: loaded
[17753539.586699] PCI: System does not support PCI
[17753539.586706] PCI: System does not support PCI
[17753539.586931] NetLabel: Initializing
[17753539.586938] NetLabel:  domain hash size = 128
[17753539.586942] NetLabel:  protocols = UNLABELED CIPSOv4
[17753539.586957] NetLabel:  unlabeled traffic allowed by default
[17753539.586975] Switching to clocksource xen
[17753539.593545] pnp: PnP ACPI: disabled
[17753539.597472] NET: Registered protocol family 2
[17753539.597689] TCP established hash table entries: 16384 (order: 6, 262144 bytes)
[17753539.597791] TCP bind hash table entries: 16384 (order: 6, 262144 bytes)
[17753539.597848] TCP: Hash tables configured (established 16384 bind 16384)
[17753539.597897] TCP: reno registered
[17753539.597918] UDP hash table entries: 1024 (order: 3, 32768 bytes)
[17753539.597944] UDP-Lite hash table entries: 1024 (order: 3, 32768 bytes)
[17753539.598026] NET: Registered protocol family 1
[17753539.598083] Unpacking initramfs...
[17753539.664684] Freeing initrd memory: 28028k freed
[17753539.675494] platform rtc_cmos: registered platform RTC device (no PNP device found)
[17753539.676092] audit: initializing netlink socket (disabled)
[17753539.676115] type=2000 audit(1410518710.207:1): initialized
[17753539.724293] bounce pool size: 64 pages
[17753539.724326] HugeTLB registered 2 MB page size, pre-allocated 0 pages
[17753539.752105] zbud: loaded
[17753539.752345] VFS: Disk quotas dquot_6.5.2
[17753539.752447] Dquot-cache hash table entries: 512 (order 0, 4096 bytes)
[17753539.752629] msgmni has been set to 3301
[17753539.753086] alg: No test for stdrng (krng)
[17753539.753103] Key type asymmetric registered
[17753539.753211] Block layer SCSI generic (bsg) driver version 0.4 loaded (major 254)
[17753539.753246] io scheduler noop registered (default)
[17753539.753314] pci_hotplug: PCI Hot Plug PCI Core version: 0.5
[17753539.754149] Serial: 8250/16550 driver, 4 ports, IRQ sharing disabled
[17753539.774318] Initialising Xen virtual ethernet driver.
[17753539.777308] blkfront: xvda1: barrier or flush: disabled; persistent grants: disabled; indirect descriptors: disabled;
[17753539.779390] Setting capacity to 16777216
[17753539.779406] xvda1: detected capacity change from 0 to 8589934592
[17753539.780628] blkfront: xvda3: barrier or flush: disabled; persistent grants: disabled; indirect descriptors: disabled;
[17753539.782527] Setting capacity to 1835008
[17753539.782539] xvda3: detected capacity change from 0 to 939524096
[17753539.782623] i8042: PNP: No PS/2 controller found. Probing ports directly.
[17753541.761599] mousedev: PS/2 mouse device common for all mice
[17753541.761921] hidraw: raw HID events driver (C) Jiri Kosina
[17753541.762178] TCP: cubic registered
[17753541.762192] NET: Registered protocol family 17
[17753541.762613] registered taskstats version 1
[17753541.859632] Freeing unused kernel memory: 1084k freed
[17753541.860039] Write protecting the kernel read-only data: 10240k
[17753541.864402] Freeing unused kernel memory: 1664k freed
[17753541.865703] Freeing unused kernel memory: 2024k freed
[17753541.940458] device-mapper: uevent: version 1.0.3
[17753541.940630] device-mapper: ioctl: 4.24.0-ioctl (2013-01-15) initialised: dm-devel@redhat.com
[17753541.978106] udevd[404]: starting version 173
udevd[475]: failed to execute '/lib/udev/input_id' 'input_id /devices/virtual/input/mice': No such file or directory

[17753542.130281] alg: No test for __gcm-aes-aesni (__driver-gcm-aes-aesni)
[17753542.543282] EXT4-fs (xvda1): mounted filesystem with ordered data mode. Opts: (null)
[17753543.158103] dracut: Remounting /dev/disk/by-label/\x2f with -o noatime,ro
[17753543.167731] EXT4-fs (xvda1): mounted filesystem with ordered data mode. Opts: (null)
[17753543.175445] dracut: Mounted root filesystem /dev/xvda1
[17753543.395660] dracut: Switching root
		Welcome to Amazon Linux AMI
Starting udev: [17753552.957446] udevd[651]: starting version 173
[17753554.543055] microcode: CPU0 sig=0x206d7, pf=0x1, revision=0x70b
[17753554.788936] microcode: Microcode Update Driver: v2.00 <tigran@aivazian.fsnet.co.uk>, Peter Oruba
[17753554.822214] alg: No test for crc32 (crc32-pclmul)
[  OK  ]
Setting hostname localhost.localdomain:  [  OK  ]
Setting up Logical Volume Management:   No volume groups found
[  OK  ]
Checking filesystems
Checking all file systems.
[/sbin/fsck.ext4 (1) -- /] fsck.ext4 -a /dev/xvda1 
/: clean, 33038/524288 files, 291019/2097152 blocks
[  OK  ]
Remounting root filesystem in read-write mode:  [17753557.369464] EXT4-fs (xvda1): re-mounted. Opts: (null)
[  OK  ]
Mounting local filesystems:  [  OK  ]
Enabling /etc/fstab swaps:  [  OK  ]
Entering non-interactive startup
[17753559.503273] NET: Registered protocol family 10
Bringing up loopback interface:  [  OK  ]
Bringing up interface eth0:  
Determining IP information for eth0... done.
[  OK  ]
Starting auditd: [17753565.442808] type=1305 audit(1410518735.971:2): audit_pid=1051 old=0 auid=4294967295 ses=4294967295
[17753565.442808]  res=1
[  OK  ]
Starting system logger: [  OK  ]
Starting irqbalance: [  OK  ]
Starting system message bus: [  OK  ]
Mounting filesystems:  [  OK  ]
Retrigger failed udev events--type=failed is deprecated and will be removed from a future udev release.
[  OK  ]
Starting cloud-init: Cloud-init v. 0.7.2 running 'init-local' at Fri, 12 Sep 2014 10:45:40 +0000. Up 30.09 seconds.
Starting cloud-init: Cloud-init v. 0.7.2 running 'init' at Fri, 12 Sep 2014 10:45:41 +0000. Up 31.21 seconds.
ci-info: ++++++++++++++++++++++++Net device info+++++++++++++++++++++++++
ci-info:  Device   Up     Address           Mask           Hw-Address    
ci-info:    lo    True   127.0.0.1       255.0.0.0             .         
ci-info:   eth0   True  10.239.59.70  255.255.255.192  22:00:0a:ef:3b:46 
ci-info: +++++++++++++++++++++++++++++++Route info++++++++++++++++++++++++++++++++
ci-info:  Route    Destination      Gateway         Genmask      Interface  Flags 
ci-info:    0        0.0.0.0      10.239.59.65      0.0.0.0         eth0      UG  
ci-info:    1      10.239.59.64     0.0.0.0     255.255.255.192     eth0      U   
ci-info:    2    169.254.169.254    0.0.0.0     255.255.255.255     eth0      UH  
Starting cloud-init: Cloud-init v. 0.7.2 running 'modules:config' at Fri, 12 Sep 2014 10:45:44 +0000. Up 34.76 seconds.
Generating public/private rsa key pair.
Your identification has been saved in /etc/ssh/ssh_host_rsa_key.
Your public key has been saved in /etc/ssh/ssh_host_rsa_key.pub.
The key fingerprint is:
6a:e1:34:63:e4:0f:b1:81:89:a5:f2:78:89:62:44:f0 root@ip-10-239-59-70
The key's randomart image is:
+--[ RSA 2048]----+
|o.  .            |
|.. + o           |
|..E o +          |
|.= . o +         |
|+.+   X S        |
|o.   + B         |
|      + .        |
|     .           |
|                 |
+-----------------+
Generating public/private dsa key pair.
Your identification has been saved in /etc/ssh/ssh_host_dsa_key.
Your public key has been saved in /etc/ssh/ssh_host_dsa_key.pub.
The key fingerprint is:
db:46:35:0f:49:87:ea:41:c7:db:55:66:20:1a:47:8c root@ip-10-239-59-70
The key's randomart image is:
+--[ DSA 1024]----+
|          .==.o.=|
|          E==+ o.|
|         ..o=o . |
|          o..+.  |
|        S...  .  |
|         +.      |
|        . o      |
|         .       |
|                 |
+-----------------+
Generating public/private ecdsa key pair.
Your identification has been saved in /etc/ssh/ssh_host_ecdsa_key.
Your public key has been saved in /etc/ssh/ssh_host_ecdsa_key.pub.
The key fingerprint is:
be:42:72:d7:1e:ba:25:18:39:81:0c:87:10:bd:3d:d0 root@ip-10-239-59-70
The key's randomart image is:
+--[ECDSA  256]---+
|o+.o.            |
|  ++E.           |
|   +o .          |
|  . o  o         |
|     .+ S.       |
|    . o=. o      |
|     +..oo..     |
|      . .+.      |
|       .o.       |
+-----------------+
[17753576.303877] Adding 917500k swap on /dev/xvda3.  Priority:-1 extents:1 across:917500k SSFS
Loaded plugins: priorities, update-motd, upgrade-helper
Metadata Cache Created
Loaded plugins: priorities, update-motd, upgrade-helper
7 package(s) needed (+0 related) for security, out of 34 available
Resolving Dependencies
--> Running transaction check
---> Package glibc.x86_64 0:2.17-55.84.amzn1 will be updated
---> Package glibc.x86_64 0:2.17-55.85.amzn1 will be an update
---> Package glibc-common.x86_64 0:2.17-55.84.amzn1 will be updated
---> Package glibc-common.x86_64 0:2.17-55.85.amzn1 will be an update
---> Package java-1.7.0-openjdk.x86_64 1:1.7.0.55-2.4.7.1.40.amzn1 will be updated
---> Package java-1.7.0-openjdk.x86_64 1:1.7.0.65-2.5.1.2.44.amzn1 will be an update
---> Package nspr.x86_64 0:4.10.4-1.21.amzn1 will be updated
---> Package nspr.x86_64 0:4.10.4-1.22.amzn1 will be an update
---> Package nss.x86_64 0:3.16.0-1.35.amzn1 will be updated
---> Package nss.x86_64 0:3.16.0-1.36.amzn1 will be an update
---> Package nss-sysinit.x86_64 0:3.16.0-1.35.amzn1 will be updated
---> Package nss-sysinit.x86_64 0:3.16.0-1.36.amzn1 will be an update
---> Package nss-tools.x86_64 0:3.16.0-1.35.amzn1 will be updated
---> Package nss-tools.x86_64 0:3.16.0-1.36.amzn1 will be an update
--> Finished Dependency Resolution

Dependencies Resolved

================================================================================
 Package             Arch    Version                        Repository     Size
================================================================================
Updating:
 glibc               x86_64  2.17-55.85.amzn1               amzn-updates  5.6 M
 glibc-common        x86_64  2.17-55.85.amzn1               amzn-updates   28 M
 java-1.7.0-openjdk  x86_64  1:1.7.0.65-2.5.1.2.44.amzn1    amzn-updates   32 M
 nspr                x86_64  4.10.4-1.22.amzn1              amzn-updates  132 k
 nss                 x86_64  3.16.0-1.36.amzn1              amzn-updates  975 k
 nss-sysinit         x86_64  3.16.0-1.36.amzn1              amzn-updates   48 k
 nss-tools           x86_64  3.16.0-1.36.amzn1              amzn-updates  839 k

Transaction Summary
================================================================================
Upgrade  7 Packages

Total download size: 67 M
Downloading packages:
--------------------------------------------------------------------------------
Total                                               24 MB/s |  67 MB  00:02     
Running transaction check
Running transaction test
Transaction test succeeded
Running transaction
  Updating   : glibc-2.17-55.85.amzn1.x86_64                               1/14 
  Updating   : glibc-common-2.17-55.85.amzn1.x86_64                        2/14 
  Updating   : nspr-4.10.4-1.22.amzn1.x86_64                               3/14 
  Updating   : nss-sysinit-3.16.0-1.36.amzn1.x86_64                        4/14 
  Updating   : nss-3.16.0-1.36.amzn1.x86_64                                5/14 
  Updating   : nss-tools-3.16.0-1.36.amzn1.x86_64                          6/14 
  Updating   : 1:java-1.7.0-openjdk-1.7.0.65-2.5.1.2.44.amzn1.x86_64       7/14 
  Cleanup    : nss-tools-3.16.0-1.35.amzn1.x86_64                          8/14 
  Cleanup    : 1:java-1.7.0-openjdk-1.7.0.55-2.4.7.1.40.amzn1.x86_64       9/14 
  Cleanup    : nss-3.16.0-1.35.amzn1.x86_64                               10/14 
  Cleanup    : nss-sysinit-3.16.0-1.35.amzn1.x86_64                       11/14 
  Cleanup    : nspr-4.10.4-1.21.amzn1.x86_64                              12/14 
  Cleanup    : glibc-common-2.17-55.84.amzn1.x86_64                       13/14 
  Cleanup    : glibc-2.17-55.84.amzn1.x86_64                              14/14 
  Verifying  : nspr-4.10.4-1.22.amzn1.x86_64                               1/14 
  Verifying  : nss-sysinit-3.16.0-1.36.amzn1.x86_64                        2/14 
  Verifying  : glibc-common-2.17-55.85.amzn1.x86_64                        3/14 
  Verifying  : nss-tools-3.16.0-1.36.amzn1.x86_64                          4/14 
  Verifying  : glibc-2.17-55.85.amzn1.x86_64                               5/14 
  Verifying  : 1:java-1.7.0-openjdk-1.7.0.65-2.5.1.2.44.amzn1.x86_64       6/14 
  Verifying  : nss-3.16.0-1.36.amzn1.x86_64                                7/14 
  Verifying  : nss-3.16.0-1.35.amzn1.x86_64                                8/14 
  Verifying  : 1:java-1.7.0-openjdk-1.7.0.55-2.4.7.1.40.amzn1.x86_64       9/14 
  Verifying  : glibc-2.17-55.84.amzn1.x86_64                              10/14 
  Verifying  : glibc-common-2.17-55.84.amzn1.x86_64                       11/14 
  Verifying  : nss-tools-3.16.0-1.35.amzn1.x86_64                         12/14 
  Verifying  : nspr-4.10.4-1.21.amzn1.x86_64                              13/14 
  Verifying  : nss-sysinit-3.16.0-1.35.amzn1.x86_64                       14/14 

Updated:
  glibc.x86_64 0:2.17-55.85.amzn1                                               
  glibc-common.x86_64 0:2.17-55.85.amzn1                                        
  java-1.7.0-openjdk.x86_64 1:1.7.0.65-2.5.1.2.44.amzn1                         
  nspr.x86_64 0:4.10.4-1.22.amzn1                                               
  nss.x86_64 0:3.16.0-1.36.amzn1                                                
  nss-sysinit.x86_64 0:3.16.0-1.36.amzn1                                        
  nss-tools.x86_64 0:3.16.0-1.36.amzn1                                          

Complete!
Generating SSH1 RSA host key: [  OK  ]
Starting sshd: [  OK  ]
ntpdate: Synchronizing with time server: [  OK  ]
Starting ntpd: [  OK  ]
Starting sendmail: [  OK  ]
Starting sm-client: [  OK  ]
Starting crond: [  OK  ]
Starting atd: [  OK  ]
Starting cloud-init: Cloud-init v. 0.7.2 running 'modules:final' at Fri, 12 Sep 2014 10:46:59 +0000. Up 109.24 seconds.
ci-info: no authorized ssh keys fingerprints found for user ec2-user.ci-info: no authorized ssh keys fingerprints found for user ec2-user.
ec2: 
ec2: #############################################################
ec2: -----BEGIN SSH HOST KEY FINGERPRINTS-----
ec2: 1024 db:46:35:0f:49:87:ea:41:c7:db:55:66:20:1a:47:8c  root@ip-10-239-59-70 (DSA)
ec2: 256 be:42:72:d7:1e:ba:25:18:39:81:0c:87:10:bd:3d:d0  root@ip-10-239-59-70 (ECDSA)
ec2: 2048 88:f4:c6:2e:ce:fb:9e:e4:61:e1:5f:f3:59:5f:70:00   (RSA1)
ec2: 2048 6a:e1:34:63:e4:0f:b1:81:89:a5:f2:78:89:62:44:f0  root@ip-10-239-59-70 (RSA)
ec2: -----END SSH HOST KEY FINGERPRINTS-----
ec2: #############################################################
-----BEGIN SSH HOST KEY KEYS-----
ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEOwbL3RmiQeBP3rdeqU+GnVVId3oECu1KdJjSGXlVNLdXTUQ6oVLr2OCgR61I4tBQkjiYn97/0g30ricY/vpDI= root@ip-10-239-59-70
2048 65537 23898797862709702899672057605489764952623033942061933969835337665247906193352689210230460833257864944354246584106936265463243276002887142812698429469836968294025312891078086940810638031977456121208937045254965925684249740133878532393404517436724384151941434237185391622144695463192085431548868359006042670160853743621777836514303648248436811833481633941990515584974427610253206501344323501436823529177207173517314578731205430516406765596437651207702057138908896318332180025622991226501449892464919737285518405141994614611340764721738467286289401820514869978264356507419770174915334689143646959072855604027828014033809 
ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDFE8R/mpUa/qITNBhYjXU+yRo4PCT3tZ2odE9CZHWNTM7SYkJ2mndPyd/mjjLHSt6122Wbfa1h2J+KTU0ije6j4f/P4vY+2sskYC03u8h6a/tI76Qs2pheMN7T4bRV7SdnKbPaKng+dcWBSpKNmYzrXsvZkxTfuHxL17Izy4YgZqwombzhFeu7B076zMq5q3nlkz/BxCCJAh5alb7fIj8LAXFKWErWc7poFFwt05QWnGK1rxXOakoyNfJPYFrt8SBNjBfkJJhFaGIGWMUxZA97EPE7MyMNRpc54P7GYFRKlVbWRNYm9hvW3duMSzBypyv18ufJNcUdLPXAsE/FZlVT root@ip-10-239-59-70
-----END SSH HOST KEY KEYS-----

Cloud-init v. 0.7.2 finished at Fri, 12 Sep 2014 10:47:00 +0000. Datasource DataSourceEc2.  Up 109.77 seconds
[r[H[J
Amazon Linux AMI release 2014.03
Kernel 3.10.42-52.145.amzn1.x86_64 on an x86_64

ip-10-239-59-70 login: 
	</output>
</GetConsoleOutputResponse>